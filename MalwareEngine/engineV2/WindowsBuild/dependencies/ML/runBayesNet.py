import os
import sys
import re

dataFile = "partialTestSet.arff"

#check if there is an argument given THERE NEEDS TO BE ONE
if(len(sys.argv) > 1):
    # path.replace(' ', '\\ ')
    dataFile = sys.argv[1]
    absPath = sys.argv[2]
    # print("DEBUGGING ====== ")
    # print(dataFile)
    # print(absPath)
else:
    print("error: no argument given")
    exit(1)

print(dataFile)
if(os.path.exists(dataFile)):
    print("exists!")
else:
    print("problem: file doesn't exist in given directory")
    exit(1)

#create .arff file from a given .csv
if(dataFile[-3:-1] + dataFile[-1] == "csv"):
    print("given a .csv, converting to .arff")
    arffFile = dataFile[0:-4] + ".arff"

    # print("PRINTING DATAFILE" + dataFile)
    # print("printing abs path\n" + absPath)


    # # a = re.sub(' +$', '', a)
    # dataFile = re.sub(' ', '\ ', dataFile)
    # absPath = re.sub(' ', '\ ', absPath)
    print("IMPORTANT INFO: ABS PATH DATAFILE")
    print(absPath+"\n"+dataFile)
    arffPath = "java -cp " + "\"" + absPath + "/ML/weka.jar\" weka.core.converters.CSVLoader " + dataFile.replace(' ', '\\ ') + " > " + arffFile.replace(' ', '\\ ') + " -B 1000"
    #Java code is not writing into dat.arff
    os.system(arffPath)
    dataFile = arffFile

    #open dat.arff
    arff = open(dataFile)
    arffContent = arff.readlines()
    #generate a new file
    generated = open(f"{absPath}/ML/generated.arff", 'a')

    #read from header
    headerFile = open(f"{absPath}/ML/headers.txt")
    headerContent = headerFile.readlines()

    #write header content to generated
    generated.writelines(headerContent)
    generated.writelines("\n")
    # print("DEBUGGING\n", arffContent)
    #write arff content to generated
    generated.writelines(arffContent[4096].upper())
    generated.close()
    generatedWriteable = open(f"{absPath}/ML/generated.arff")
    generatedContent = generatedWriteable.readlines()
    # print("DEBUGGING\n", generatedContent)
    #convert arff file to generated
    arffWriteable = open(f"{absPath}/ML/flamingo.txt", "w")
    arffWriteable.writelines(generatedContent)
    
    #remove generated
    generatedWriteable.close()
    os.remove(f"{absPath}/ML/generated.arff")
    arff.close()
    generated.close()
    headerFile.close()
    arffWriteable.close()
    os.remove(arffFile)
    os.rename(f"{absPath}/ML/flamingo.txt",arffFile)


#run model on generated .arff
#os.system("java -cp \"./weka.jar\" weka.classifiers.bayes.BayesNet -T " + dataFile + " -l bayesNet.model -p 0 -c 1 > prediction.txt")

genPath = "java -cp " +absPath.replace(' ', '\\ ') +"/ML/weka.jar weka.classifiers.bayes.BayesNet -T " + dataFile.replace(' ', '\\ ') + " -l " + absPath.replace(' ', '\\ ') + "/ML/bayesNet.model -p 0 -c 1 > " + absPath.replace(' ', '\\ ') + "/ML/prediction.txt"
print(genPath)

os.system(genPath)

# open the sample file used
file = open(f'{absPath}/ML/prediction.txt')
  
# read the content of the file opened
content = file.readlines()

#read prediction of single instance
val = content[5]

if "malicous" in val:
    print("MALWARE")
elif "benign" in val:
    print("BENIGN")
else:
    print("ERROR")