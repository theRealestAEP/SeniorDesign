const fs = require('fs')


const malwareDirectory = "./Malware"
const cleanFileDirectory = "./CleanFiles"

const getDLLPath = "./goComp/PEDLLParser/dll"
const getEntropyPath = "./goComp/EntropyUtil/EntropyUtil"
const getFileSize = "./goComp/getFileSize/getFileSize"

const createCsvWriter = require('csv-writer').createObjectCsvWriter;

const execSync = require('child_process').execSync


const main = () => {
    let malwareFiles = []
    let malwareFilesData = []

    let cleanFiles = []
    let cleanFileData = []

    let allData = []

    /*
        Getting Features
    */
    fs.readdirSync(malwareDirectory).forEach(file => {
        malwareFiles.push(file)
        let dataObj = {}

        dataObj['file'] = file
        // console.log(file)
        try {
            let data = execSync(`${getDLLPath} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            // console.log(typeof data)
            // let pData = JSON.parse(data.stdout)
            // console.log(`The DATA ******: ${data} test`)
            // malwareFilesData.push(data)
            let pdata = data.split(/\r?\n/)
            pdata = pdata.filter(item => item);
            dataObj['DLL'] = pdata
            dataObj['numDLLS'] = pdata.length
        }
        catch (e) {
            dataObj['DLL'] = 'error'
        }

        //get entropy
        try {
            let data = execSync(`${getEntropyPath} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            dataObj['entropy'] = parseInt(data.split(/\r?\n/))

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['entropy'] = 'error'

        }

        //get file size
        try {
            let data = execSync(`${getFileSize} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            dataObj['fileSize'] = parseInt(data.split(/\r?\n/))

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['fileSize'] = 'error'

        }

        malwareFilesData.push(dataObj)
        allData.push(dataObj)
    });

    fs.readdirSync(cleanFileDirectory).forEach(file => {
        cleanFiles.push(file)
        let dataObj = {}
        // console.log(file)
        dataObj['file'] = file

        try {
            let data = execSync(`${getDLLPath} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let pdata = data.split(/\r?\n/)
            pdata = pdata.filter(item => item);
            dataObj['DLL'] = pdata
            dataObj['numDLLS'] = pdata.length
        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            // malwareFilesData.push('error')
            dataObj['DLL'] = 'error'

        }

        //get entropy
        try {
            let data = execSync(`${getEntropyPath} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            dataObj['entropy'] = parseInt(data.split(/\r?\n/))

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['entropy'] = 'error'

        }

        //get file size
        try {
            let data = execSync(`${getFileSize} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            dataObj['fileSize'] = parseInt(data.split(/\r?\n/))

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['fileSize'] = 'error'

        }


        cleanFileData.push(dataObj)
        allData.push(dataObj)

    });


    for (let i = 0; i < malwareFiles.length; i++) {
        console.log(`${malwareFiles[i]}:${JSON.stringify(malwareFilesData[i], 0, null)}`)
    }

    for (let i = 0; i < cleanFiles.length; i++) {
        console.log(`${cleanFiles[i]}:${JSON.stringify(cleanFileData[i], 0, null)}`)
    }


    //run all the files through go engine & store output 



    //create csv of different frequencies
    const csvWriter = createCsvWriter({
        path: 'out.csv',
        header: [
            { id: 'file', title: 'File' },
            { id: 'DLL', title: 'DLLs' },
            { id: 'numDLL', title: 'Number of DLLS' },
            { id: 'entropy', title: 'Entropy' },
            { id: 'fileSize', title: 'File Size' },
        ]
    });

    csvWriter.writeRecords(allData).then(() => console.log('The CSV file was written successfully'));


}



main()

