const fs = require('fs')

// const PE = require('portable-executable') Dont really need this 

const malwareDirectory = "./Malware"
const cleanFileDirectory = "./CleanFiles"

const getDLLPath = "./goComp/PEDLLParser/dll"
const getEntropyPath = "./goComp/EntropyUtil/EntropyUtil"
const getFileSize = "./goComp/getFileSize/getFileSize"
const getHeaderInfo = "./goComp/headerUtil/headerUtil"
const getFileFunctions = "python ./dllFunctionCallParser/analysePE.py"


const createCsvWriter = require('csv-writer').createObjectCsvWriter;

const execSync = require('child_process').execSync



let malwareFiles = []
let malwareFilesData = []

let cleanFiles = []
let cleanFileData = []

let allData = []

const main = () => {

    // console.log(DLLData)

    /*
        Getting Features
    */
    fs.readdirSync(malwareDirectory).forEach(file => {
        //set filepath
        let filePath = `./${malwareDirectory}/${file}`

        malwareFiles.push(file)
        let dataObj = {}

        dataObj['file'] = file
        dataObj['Malicous'] = 'malicous'

        // console.log(file)
        try {
            let data = execSync(`${getDLLPath} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let pdata = data.split(/\r?\n/)
            pdata = pdata.filter(item => item);
            dataObj['DLL'] = pdata
            dataObj['numDLLS'] = pdata.length
        }
        catch (e) {
            dataObj['DLL'] = 'error'
            dataObj['numDLLS'] = 0

        }

        //get entropy
        try {
            let data = execSync(`${getEntropyPath} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let ent = parseFloat(data.split(/\r?\n/))
            if (ent != 'NaN') {

                dataObj['entropy'] = ent
            }
            else {
                dataObj['entropy'] = 0

            }

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['entropy'] = 0

        }

        //get file size
        try {
            let data = execSync(`${getFileSize} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            dataObj['fileSize'] = parseInt(data.split(/\r?\n/))

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['fileSize'] = 0

        }

        //get header data 
        try {
            let data = execSync(`${getHeaderInfo} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            data = data.replace(/\r?\n|\r/g, "");
            let pdata = data.split(' ')

            dataObj['isDLL'] = pdata[0]
            dataObj['isSYS'] = pdata[1]
            dataObj['base'] = pdata[2]
            dataObj['file1'] = pdata[3]
            dataObj['file2'] = pdata[4]
            dataObj['dosHeader[0]'] = pdata[5]
            dataObj['dosHeader[1]'] = pdata[6]
            dataObj['MagicNumber'] = pdata[7]

            // console.log(pdata)

        }
        catch (e) {
            // console.log(e)
            dataObj['isDLL'] = 'false'
            dataObj['isSYS'] = 'false'
            dataObj['base'] = '0'
            dataObj['file1'] = '0'
            dataObj['file2'] = '0'
            dataObj['dosHeader[0]'] = '0'
            dataObj['dosHeader[1]'] = '0'
            dataObj['MagicNumber'] = '0'
        }

        //get imported functions
        try {
            let data = execSync(`${getFileFunctions} ./${malwareDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let lineData = data.split('\n')

            let allFuncs = []

            for (let i = 0; i < lineData.length; i++) {
                if (!lineData[i].includes(".dll")) {
                    lineData[i] = lineData[i].replace(/\r?\n|\r/g, "");
                    let func = lineData[i].split(':')
                    // func[1] 
                    // console.log(func)
                    // console.log(func[1])
                    if (typeof(func[1]) != 'undefined' && func != '') {
                        // console.log(func[1])
                        allFuncs.push(func[1])
                        //also need to make this a feature
                    }

                }
            }
            
            allFuncs = allFuncs.filter(item => item);
            dataObj['numFuncs'] = allFuncs.length
            dataObj['functions'] = allFuncs

        }
        catch (e) {
            // console.log(e)
            dataObj['functions'] = ''

        }

        malwareFilesData.push(dataObj)
        allData.push(dataObj)
    });

    fs.readdirSync(cleanFileDirectory).forEach(file => {
        let filePath = `./${cleanFileDirectory}/${file}`

        cleanFiles.push(file)
        let dataObj = {}
        // console.log(file)
        dataObj['file'] = file
        dataObj['Malicous'] = 'benign'

        try {
            let data = execSync(`${getDLLPath} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let pdata = data.split(/\r?\n/)
            pdata = pdata.filter(item => item);
            dataObj['DLL'] = pdata
            dataObj['numDLLS'] = pdata.length
        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            // malwareFilesData.push('error')
            dataObj['DLL'] = 'error'
            dataObj['numDLLS'] = 0


        }

        //get entropy
        try {
            let data = execSync(`${getEntropyPath} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let ent = parseFloat(data.split(/\r?\n/))
            if (ent != 'NaN') {

                dataObj['entropy'] = ent
            }
            else {
                dataObj['entropy'] = 0

            }
        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['entropy'] = 0

        }

        //get file size
        try {
            let data = execSync(`${getFileSize} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            dataObj['fileSize'] = parseInt(data.split(/\r?\n/))

        }
        catch (e) {
            // console.log(`can't open: ${e}`)
            dataObj['fileSize'] = 0

        }

        //get header data 
        try {
            let data = execSync(`${getHeaderInfo} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            data = data.replace(/\r?\n|\r/g, "");
            let pdata = data.split(' ')

            dataObj['isDLL'] = pdata[0]
            dataObj['isSYS'] = pdata[1]
            dataObj['base'] = pdata[2]
            dataObj['file1'] = pdata[3]
            dataObj['file2'] = pdata[4]
            dataObj['dosHeader[0]'] = pdata[5]
            dataObj['dosHeader[1]'] = pdata[6]
            dataObj['MagicNumber'] = pdata[7]

            // console.log(pdata)

        }
        catch (e) {
            // console.log(e)
            dataObj['isDLL'] = 'false'
            dataObj['isSYS'] = 'false'
            dataObj['base'] = '0'
            dataObj['file1'] = '0'
            dataObj['file2'] = '0'
            dataObj['dosHeader[0]'] = '0'
            dataObj['dosHeader[1]'] = '0'
            dataObj['MagicNumber'] = '0'
        }

        //get imported functions
        try {
            let data = execSync(`${getFileFunctions} ./${cleanFileDirectory}/${file}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
            let lineData = data.split('\n')

            let allFuncs = []

            for (let i = 0; i < lineData.length; i++) {
                if (!lineData[i].includes(".dll")) {
                    lineData[i] = lineData[i].replace(/\r?\n|\r/g, "");
                    let func = lineData[i].split(':')
                    // func[1] 
                    // console.log(func)
                    // console.log(func[1])
                    if (typeof (func[1]) != 'undefined' && func != '') {
                        // console.log(func[1])
                        allFuncs.push(func[1])

                        //also need to make this a feature
                    }

                }
            }

            allFuncs = allFuncs.filter(item => item);
            dataObj['numFuncs'] = allFuncs.length
            dataObj['functions'] = allFuncs

        }
        catch (e) {
            // console.log(e)
            dataObj['functions'] = ''

        }


        cleanFileData.push(dataObj)
        allData.push(dataObj)
    });





    // get DLL frequency for features
    // getUniqueDLL()

    // get Function frequency
    // getUniqueFunctions()

    //generate CSV
    generateCSV()


}

const getFreq = (list, matchString) => {
    let count = 0
    list.forEach((dll) => {
        if (matchString == dll) {
            count++
        }
    })

    return count
}

const getUniqueDLL = () => {
    let allDLLS = {
        DLL_LIST: []
    } //to get all DLLS and their frequency
    for (let i = 0; i < allData.length; i++) {
        // console.log(`${cleanFiles[i]}:${JSON.stringify(cleanFileData[i], 0, null)}`) get a list of all DLLS
        try {
            allData[i].DLL.forEach(dll => {
                allDLLS.DLL_LIST.push(dll)
            })
        }
        catch (e) {
            //suppress error because I am lazy
            console.log(e)
        }
    }

    //get frequency 


    //get a unique index 
    uniqueDLLS = allDLLS.DLL_LIST.filter(function (elem, pos) {
        return allDLLS.DLL_LIST.indexOf(elem) == pos;
    })

    uniqueDLLS.forEach((dll) => {
        let freq = getFreq(allDLLS.DLL_LIST, dll)
        allDLLS[dll] = freq
    })

    //adjust the meta list 

    allDLLS.DLL_LIST = uniqueDLLS
    //save the whole list 
    var jsonContent = JSON.stringify(allDLLS);
    console.log(jsonContent);


    fs.writeFile("DLL_DATA.json", jsonContent, 'utf8', function (err) {
        if (err) {
            console.log("An error occured while writing JSON Object to File.");
            return console.log(err);
        }

        console.log("JSON file has been saved.");
    });
}

const getUniqueFunctions = () => {
    let allFuncs = {
        FUNC_LIST: []
    } //to get all DLLS and their frequency
    for (let i = 0; i < allData.length; i++) {
        // console.log(`${cleanFiles[i]}:${JSON.stringify(cleanFileData[i], 0, null)}`) get a list of all DLLS
        try {
            allData[i].functions.forEach(func => {
                allFuncs.FUNC_LIST.push(func)
            })
        }
        catch (e) {
            //suppress error because I am lazy
            console.log(e)
        }
    }

    //get frequency 


    //get a unique index 
    uniqueFuncs = allFuncs.FUNC_LIST.filter(function (elem, pos) {
        return allFuncs.FUNC_LIST.indexOf(elem) == pos;
    })

    uniqueFuncs.forEach((func) => {
        let freq = getFreq(allFuncs.FUNC_LIST, func)
        allFuncs[func] = freq
    })

    //adjust the meta list 

    allFuncs.FUNC_LIST = uniqueFuncs
    //save the whole list 
    var jsonContent = JSON.stringify(allFuncs);
    console.log(jsonContent);


    fs.writeFile("FUNCTION_DATA.json", jsonContent, 'utf8', function (err) {
        if (err) {
            console.log("An error occured while writing JSON Object to File.");
            return console.log(err);
        }

        console.log("JSON file has been saved.");
    });
}

const generateCSV = () => {
    let DLLData = JSON.parse(fs.readFileSync('./DLL_DATA.json'))
    let FuncData = JSON.parse(fs.readFileSync('./FUNCTION_DATA.json'))



    console.log(DLLData)

    for (let x = 0; x < allData.length; x++) {
        let file = allData[x]

        for (let i = 0; i < DLLData.DLL_LIST.length; i++) {
            file[DLLData.DLL_LIST[i]] = 0
        }

        for (let b = 0; b < file.DLL.length; b++) {
            if (DLLData.DLL_LIST.includes(file.DLL[b])) {
                file[file.DLL[b]] = 1
            }
        }

        for (let i = 0; i < FuncData.FUNC_LIST.length; i++) {
            file[FuncData.FUNC_LIST[i]] = 0
        }

        for (let b = 0; b < file.functions.length; b++) {
            if (FuncData.FUNC_LIST.includes(file.functions[b])) {
                file[file.functions[b]] = 1
            }
        }

    }


    //run all the files through go engine & store output 
    let header = [
        { id: 'file', title: 'File' },
        { id: 'Malicous', title: 'IsMalicous' },
        { id: 'DLL', title: 'DLLs' },
        { id: 'numDLLS', title: 'Number of DLLS' },
        { id: 'entropy', title: 'Entropy' },
        { id: 'fileSize', title: 'File Size' },
        { id: 'isSYS', title: 'SYS File' },
        { id: 'isDLL', title: 'DLL File' },
        { id: 'file1', title: 'File Type 1' },
        { id: 'file2', title: 'File Type 2' },
        { id: 'dosHeader[0]', title: 'First DOS Header' },
        { id: 'dosHeader[1]', title: 'Second DOS Header' },
        { id: 'MagicNumber', title: 'First DOS Header' },
        { id: 'functions', title: 'Functions' },
        { id: 'numFuncs', title: 'Number of Functions' },

        
    ]
    //set the features
    for (let x = 0; x < DLLData.DLL_LIST.length; x++) {
        if(DLLData[DLLData.DLL_LIST[x]] > 1){
            header.push(
                {
                    id: DLLData.DLL_LIST[x],
                    title: DLLData.DLL_LIST[x]
                }
            )
        }
    }

    for (let x = 0; x < FuncData.FUNC_LIST.length; x++) {
        if(FuncData[FuncData.FUNC_LIST[x]] > 3){
            header.push(
                {
                    id: FuncData.FUNC_LIST[x],
                    title: FuncData.FUNC_LIST[x]
                }
            )
        }
    }
    //create csv of different frequencies
    const csvWriter = createCsvWriter({
        path: 'out.csv',
        header: header

    }); //have to do this dynamically 

    csvWriter.writeRecords(allData).then(() => console.log('The CSV file was written successfully'));
}

// const debug = () => {
//     // let filePath =  `./CleanFiles/getscreen.exe`
//     let filePath = `./Malware/0d83906aa1c84a83028cd12f8ef9582a260f94e56c4254cb35735b98d7266b8e.exe`
//     try {
//         console.log('strings')
//         let pe = PE.strings(fs.readFileSync(filePath))
//         console.log(JSON.stringify(pe))

//         console.log('other')
//         pe = PE.PortableExecutable(fs.readFileSync(filePath))
//         console.log(JSON.stringify(pe))
//     }
//     catch (e) {
//         console.log(e)
//     }
// }
// debug()
main()


