const fs = require('fs')

// const PE = require('portable-executable') Dont really need this 

const getDLLPath = "./goComp/PEDLLParser/dll"
const getEntropyPath = "./goComp/EntropyUtil/EntropyUtil"
const getFileSize = "./goComp/getFileSize/getFileSize"
const getHeaderInfo = "./goComp/headerUtil/headerUtil"
const getFileFunctions = "python ./dllFunctionCallParser/analysePE.py"


const createCsvWriter = require('csv-writer').createObjectCsvWriter;

const execSync = require('child_process').execSync


let allData = []

let filePath = ''
let dataObj = {}

const main = () => {


    filePath = process.argv[2]
    console.log(filePath)

    if (!fs.existsSync(filePath)) {
        console.log(`usage ${process.argv[1]} ${process.argv[2]}`)
        process.exit()
    }

    /*
        Getting Features
    */

    let file = fs.readFileSync(filePath)
    console.log(filePath)


    dataObj['file'] = filePath
    dataObj['Malicous'] = '?'

    // console.log(file)
    try {
        let data = execSync(`${getDLLPath} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
        let pdata = data.split(/\r?\n/)
        pdata = pdata.filter(item => item);
        dataObj['DLL'] = pdata
        dataObj['numDLLS'] = pdata.length
    }
    catch (e) {
        dataObj['DLL'] = '?'
        dataObj['numDLLS'] = 0

    }

    //get entropy
    try {
        let data = execSync(`${getEntropyPath} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
        let ent = parseFloat(data.split(/\r?\n/))
        if (!isNaN(ent)) {

            dataObj['entropy'] = ent
        }
        else {
            dataObj['entropy'] = '?'

        }

    }
    catch (e) {
        // console.log(`can't open: ${e}`)
        dataObj['entropy'] = '?'

    }

    //get file size
    try {
        let data = execSync(`${getFileSize} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
        dataObj['fileSize'] = parseInt(data.split(/\r?\n/))

    }
    catch (e) {
        // console.log(`can't open: ${e}`)
        dataObj['fileSize'] = '?'

    }

    //get header data 
    try {
        let data = execSync(`${getHeaderInfo} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
        data = data.replace(/\r?\n|\r/g, "");
        let pdata = data.split(' ')

        dataObj['isDLL'] = pdata[0]
        dataObj['isSYS'] = pdata[1]
        dataObj['base'] = pdata[2]
        dataObj['file1'] = pdata[3]
        dataObj['file2'] = pdata[4]
        dataObj['dosHeader[0]'] = pdata[5]
        dataObj['dosHeader[1]'] = pdata[6]
        dataObj['MagicNumber'] = pdata[7]

        // console.log(pdata)

    }
    catch (e) {
        // console.log(e)
        dataObj['isDLL'] = 'false'
        dataObj['isSYS'] = 'false'
        dataObj['base'] = '?'
        dataObj['file1'] = '?'
        dataObj['file2'] = '?'
        dataObj['dosHeader[0]'] = '?'
        dataObj['dosHeader[1]'] = '?'
        dataObj['MagicNumber'] = '?'
    }

    //get imported functions
    try {
        let data = execSync(`${getFileFunctions} ${filePath}`, { encoding: 'utf8', maxBuffer: 50 * 1024 * 1024 })
        let lineData = data.split('\n')

        let allFuncs = []

        for (let i = 0; i < lineData.length; i++) {
            if (!lineData[i].includes(".dll")) {
                lineData[i] = lineData[i].replace(/\r?\n|\r/g, "");
                let func = lineData[i].split(':')
                // func[1] 
                // console.log(func)
                // console.log(func[1])
                if (typeof (func[1]) != 'undefined' && func != '') {
                    // console.log(func[1])
                    allFuncs.push(func[1])
                    //also need to make this a feature
                }

            }
        }

        allFuncs = allFuncs.filter(item => item);
        dataObj['numFuncs'] = allFuncs.length
        dataObj['functions'] = allFuncs

    }
    catch (e) {
        dataObj['functions'] = ''

    }

    // allData.push(dataObj) //me being lazy
    //dont really need to make this an arrahy


    //generate CSV
    generateCSV()


}

const getFreq = (list, matchString) => {
    let count = 0
    list.forEach((dll) => {
        if (matchString == dll) {
            count++
        }
    })

    return count
}

const generateCSV = () => {
    let DLLData = JSON.parse(fs.readFileSync('./DLL_DATA.json'))
    let FuncData = JSON.parse(fs.readFileSync('./FUNCTION_DATA.json'))



    // console.log(DLLData)

    // for (let x = 0; x < allData.length; x++) {
    let file = dataObj
    console.log(file)
    for (let i = 0; i < DLLData.DLL_LIST.length; i++) {
        file[DLLData.DLL_LIST[i]] = 0
    }

    for (let b = 0; b < file.DLL.length; b++) {
        if (DLLData.DLL_LIST.includes(file.DLL[b])) {
            file[file.DLL[b]] = 1
        }
    }

    for (let i = 0; i < FuncData.FUNC_LIST.length; i++) {
        file[FuncData.FUNC_LIST[i]] = 0
    }

    for (let b = 0; b < file.functions.length; b++) {
        if (FuncData.FUNC_LIST.includes(file.functions[b])) {
            file[file.functions[b]] = 1
        }
    }

    // }


    //run all the files through go engine & store output 
    let header = [
        { id: 'file', title: 'File' },
        { id: 'Malicous', title: 'IsMalicous' },
        // { id: 'DLL', title: 'DLLs' },
        { id: 'numDLLS', title: 'Number of DLLS' },
        { id: 'entropy', title: 'Entropy' },
        { id: 'fileSize', title: 'File Size' },
        { id: 'isSYS', title: 'SYS File' },
        { id: 'isDLL', title: 'DLL File' },
        { id: 'file1', title: 'File Type 1' },
        { id: 'file2', title: 'File Type 2' },
        { id: 'dosHeader[0]', title: 'First DOS Header' },
        { id: 'dosHeader[1]', title: 'Second DOS Header' },
        { id: 'MagicNumber', title: 'Magic' },
        // { id: 'functions', title: 'Functions' },
        { id: 'numFuncs', title: 'Number of Functions' },


    ]
    //set the features
    for (let x = 0; x < DLLData.DLL_LIST.length; x++) {
        if (DLLData[DLLData.DLL_LIST[x]] > 1) {
            header.push(
                {
                    id: DLLData.DLL_LIST[x],
                    title: DLLData.DLL_LIST[x]
                }
            )
        }
    }

    for (let x = 0; x < FuncData.FUNC_LIST.length; x++) {
        if (FuncData[FuncData.FUNC_LIST[x]] > 3) {
            header.push(
                {
                    id: FuncData.FUNC_LIST[x],
                    title: FuncData.FUNC_LIST[x]
                }
            )
        }
    }
    //create csv of different frequencies
    const csvWriter = createCsvWriter({
        path: 'dat.csv',
        header: header

    });

    csvWriter.writeRecords([dataObj]).then(() => { 
        
        console.log('The CSV file was written successfully, time to evaluate the file') 
    
    });
}

main()


