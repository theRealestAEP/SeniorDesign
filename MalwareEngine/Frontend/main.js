const { app, BrowserWindow, ipcMain } = require('electron')


let malwareScanV1
let malwareScanV2
let engine = 1 //0 slow, 1 is fast v2

const createWindow = () => {
    const win = new BrowserWindow({
        width: 800,
        height: 600,
        webPreferences: {
            nodeIntegration: true,
            contextIsolation: false
        },
    })
    //openDevTools throws error just comment out to get rid of
    win.webContents.openDevTools();
    win.loadFile('index.html')
}

let platform = process.platform
console.log(platform)
app.whenReady().then(() => {
    console.log(platform)
    if (platform == "darwin") {
        malwareScanV1 = require('../engineV2/MacBuild/dependencies/macEval').main
        malwareScanV2 = require('../engineV2/MacBuild/dependencies/EngineV2/macEvalV2').main
    }
    else if (platform == "win32") {
        malwareScanV1 = require('../engineV2/WindowsBuild/dependencies/winEval').main
    }
    else {
        console.log('unsupported platform')
    }
    createWindow()
})


app.on('window-all-closed', () => {
    if (process.platform !== 'darwin') app.quit()
})

ipcMain.on("myButtonClick", (event, data) => {
    // console.log(event)
    console.log(data)
    switch (engine) {
        case 0:
            malwareScanV1(data).then((result) => {
                console.log(result)
                event.sender.send('eval', result);
            })
        case 1:
            malwareScanV2(data).then((result) => {
                console.log(result)
                event.sender.send('eval', result);
            })
            break;
        default:
            break;
    }

    // malwareScan(data).then((result) => {
    //     console.log(result)
    //     event.sender.send('eval', result);
    // })
})

ipcMain.on("dropZone", (evt, data) => {
    switch (engine) {
        case 0:
            malwareScanV1(data).then((result) => {
                console.log(result)
                evt.sender.send('eval', result);
            })
        case 1:
            malwareScanV2(data).then((result) => {
                console.log(result)
                evt.sender.send('eval', result);
            })
            break;
        default:
            break;
    }



})

// ipcMain.on("dropZone", (evt, data) => {
//     //console.log(evt);
//     console.log(data);
//     if(platform == 'darwin'){
//         let result = malwareScanMac(data)
//         console.log(result)
//     }

// })

ipcMain.on("filePath", (evt, data) => {
    //console.log(evt);
    switch (engine) {
        case 0:
            malwareScanV1(data).then((result) => {
                console.log(result)
                evt.sender.send('eval', result);
            })
        case 1:
            malwareScanV2(data).then((result) => {
                console.log(result)
                evt.sender.send('eval', result);
            })
            break;
        default:
            break;
    }


})



console.log('Initializing')